"""convert_programlevel_to_string

Revision ID: be54a3092f06
Revises: 3074fafd448a_update_enum
Create Date: 2025-07-10 22:05:35.732421

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from database import Base
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'be54a3092f06'
down_revision: Union[str, None] = '3074fafd448a_update_enum'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First, create a temporary column to store the enum values as strings
    op.add_column('programs', sa.Column('level_str', sa.String(), nullable=True))
    
    # Copy data from enum column to string column
    op.execute("UPDATE programs SET level_str = level::text")
    
    # Drop the enum column
    op.drop_column('programs', 'level')
    
    # Rename the string column to the original column name
    op.alter_column('programs', 'level_str', new_column_name='level', nullable=False)
    
    # Handle other changes
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    
    if 'home_overview' in inspector.get_table_names():
        op.drop_index('ix_home_overview_id', table_name='home_overview')
        op.drop_table('home_overview')
    
    if 'quick_links' in inspector.get_table_names():
        op.drop_index('ix_quick_links_id', table_name='quick_links')
        op.drop_table('quick_links')
    
    op.alter_column('courses', 'prerequisites',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
               
    op.alter_column('equipment', 'id',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
               
    op.alter_column('equipment_bookings', 'id',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
               
    op.alter_column('equipment_categories', 'id',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
               
    op.create_index(op.f('ix_lab_bookings_id'), 'lab_bookings', ['id'], unique=False)
    op.create_index(op.f('ix_lab_time_slots_id'), 'lab_time_slots', ['id'], unique=False)
    op.create_index(op.f('ix_labs_id'), 'labs', ['id'], unique=False)
    
    op.alter_column('programs', 'specializations',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
               
    op.alter_column('programs', 'learning_objectives',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
               
    op.alter_column('programs', 'career_prospects',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
               
    # Drop the enum type if it exists
    op.execute("DROP TYPE IF EXISTS programlevel;")
    # ### end Alembic commands ###
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Convert JSON columns back to JSONB
    op.alter_column('programs', 'career_prospects',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('programs', 'learning_objectives',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('programs', 'specializations',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
               
    # Create the enum type
    op.execute("CREATE TYPE programlevel AS ENUM ('Undergraduate', 'Graduate', 'Postgraduate')")
    
    # Create a temporary column with the enum type
    op.add_column('programs', sa.Column('level_enum', postgresql.ENUM('Undergraduate', 'Graduate', 'Postgraduate', name='programlevel'), nullable=True))
    
    # Copy data from string column to enum column
    op.execute("UPDATE programs SET level_enum = level::programlevel")
    
    # Drop the string column
    op.drop_column('programs', 'level')
    
    # Rename the enum column to the original column name
    op.alter_column('programs', 'level_enum', new_column_name='level', nullable=False)
    
    # Other changes
    op.drop_index(op.f('ix_labs_id'), table_name='labs')
    op.drop_index(op.f('ix_lab_time_slots_id'), table_name='lab_time_slots')
    op.drop_index(op.f('ix_lab_bookings_id'), table_name='lab_bookings')
    
    op.alter_column('equipment_categories', 'id',
               existing_type=sa.INTEGER(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('equipment_bookings', 'id',
               existing_type=sa.INTEGER(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('equipment', 'id',
               existing_type=sa.INTEGER(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('courses', 'prerequisites',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.create_table('quick_links',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('href', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('icon', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='quick_links_pkey')
    )
    op.create_index('ix_quick_links_id', 'quick_links', ['id'], unique=False)
    op.create_table('home_overview',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stats_students', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('stats_faculty', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('stats_programs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('stats_research', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('hero_image', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='home_overview_pkey')
    )
    op.create_index('ix_home_overview_id', 'home_overview', ['id'], unique=False)
    # ### end Alembic commands ###
